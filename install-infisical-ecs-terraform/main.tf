// Add Infisical root credentials in parameter store under path /infisical-core 
data "aws_ssm_parameters_by_path" "infisical_server_secrets" {
  path = "/infisical-core"
}


module "ecs_cluster" {
  source = "terraform-aws-modules/ecs/aws//modules/cluster"

  cluster_name              = "infisical"
  create_task_exec_iam_role = true
  create_task_exec_policy   = true

  cluster_configuration = {
    execute_command_configuration = {
      logging = "OVERRIDE"
      log_configuration = {
        cloud_watch_log_group_name = "infisical-cluster-log-group"
      }
    }
  }

  fargate_capacity_providers = {
    FARGATE = {
      default_capacity_provider_strategy = {
        weight = 70
      }
    }
    FARGATE_SPOT = {
      default_capacity_provider_strategy = {
        weight = 30
      }
    }
  }
}

module "ecs_main_server" {
  source      = "terraform-aws-modules/ecs/aws//modules/service"
  cluster_arn = module.ecs_cluster.arn

  assign_public_ip = true
  name             = local.name

  desired_count = 4
  autoscaling_min_capacity = 4
  autoscaling_max_capacity = 30

  cpu    = 2048 
  memory = 4096 

  autoscaling_policies = {
    cpu = {
      policy_type = "TargetTrackingScaling"
      target_tracking_scaling_policy_configuration = {
        predefined_metric_specification = {
          predefined_metric_type = "ECSServiceAverageCPUUtilization"
        }

        target_value = 60
        scale_in_cooldown = 60
      }
    }

    memory = {
      policy_type = "TargetTrackingScaling"

      target_tracking_scaling_policy_configuration = {
        predefined_metric_specification = {
          predefined_metric_type = "ECSServiceAverageMemoryUtilization"
        }

        target_value = 60
        scale_in_cooldown = 60
      }
    }
  }

  container_definitions = {
    infisical-core-platform = {
      essential = true
      image     = "infisical/infisical:v0.62.4-postgres"
      health_check = {
        command = ["CMD-SHELL", "wget  --no-verbose --tries=1 --spider http://localhost:8080/api/status || exit 1"]
        interval = 5
        startPeriod = 10
      }
      port_mappings = [
        {
          name          = "infisical-standalone"
          containerPort = 8080
          hostPort      = 8080
          protocol      = "tcp"
        }
      ]

      secrets = concat([
        for index, arn in data.aws_ssm_parameters_by_path.infisical_server_secrets.arns : { 
          name = reverse(split("/", data.aws_ssm_parameters_by_path.infisical_server_secrets.names[index]))[0], 
          valueFrom = arn
        }
      ])

      environment = [
        {
          "name": "DB_ROOT_CERT", // THIS IS BASE64 ENCODED RDS CERT for US-EAST-1, UPDATE IF USING DIFFERENT REGION
          "value": ""
        }
      ]

      readonly_root_filesystem = false

      memory_reservation = 100
    }
  }

  load_balancer = {
    service = {
      target_group_arn = module.alb.target_groups["target_ecs"].arn
      container_name   = "infisical-core-platform"
      container_port   = 8080
    }
  }

  subnet_ids         = module.vpc.public_subnets
  security_group_ids = [aws_security_group.core_server_ecs.id]
}



